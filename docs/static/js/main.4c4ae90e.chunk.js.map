{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","setImages","useEffect","then","imgs","catch","console","error","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAa9C,OACI,sBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZpB,SAAAP,GAAC,OAAIF,EAAcE,EAAEQ,OAAOF,a,+BCS3CG,EAfF,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DACNC,EADM,iDAC2CC,UAAUR,GADrD,+DAEWS,MAAMF,GAFjB,cAENG,EAFM,gBAGWA,EAASC,OAHpB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT9B,kBAYLM,GAZK,4CAAH,sDCEAO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACZR,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAH2B,mBACjCP,EADiC,KACzBQ,EADyB,KAgBxC,OAVAC,qBAAW,WAEPtB,EAASL,GACJ4B,MAAM,SAAAC,GAAI,OAAIH,EAAU,CACrBd,KAAMiB,EACNJ,SAAS,OAEZK,MAAMC,QAAQC,SAEpB,CAAChC,IACGkB,EDb0Be,CAAcjC,GAAlCkB,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAqDrB,EAArD,OACEyB,GAAW,mBAAGJ,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA+BA,GAAbA,EAAIC,aEVjCkB,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,cADhB,mBACvB2C,EADuB,KACX5C,EADW,KAI9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWrB,KAAK,SAAAd,GAAQ,OAEpB,aADA,CACC,EAAD,CAAwBA,SAAUA,GAApBA,YCbhCoC,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.4c4ae90e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropsTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [InputValue, setInputValue] = useState('');\r\n    const handleInputChange = e => setInputValue(e.target.value);\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if( InputValue.trim().length > 2 ){\r\n            setCategories( category => [ InputValue, ...category ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={InputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropsTypes.func.isRequired\r\n}","const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=ll7UhtLjL0WT5JZ1jPlw6nqoCyvLo80N`;\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    } );\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => \r\n                        <GifGridItem key={img.id} { ...img } />\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [images, setImages] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => setImages({\r\n                data: imgs,\r\n                loading: false\r\n            }) )\r\n            .catch(console.error);\r\n\r\n    }, [category] );\r\n    return images;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['SpiderMan']);\r\n    // const [categories, setCategories] = useState(['SpiderMan', 'God of War', 'The Blacklist']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => \r\n                        // <li key={category}> {category} </li> \r\n                        <GifGrid key={category} category={category} />\r\n                    ) \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render( <GifExpertApp />, divRoot );"],"sourceRoot":""}